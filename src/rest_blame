83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    1) // -*- mode:C++; tab-width:8; c-basic-offset:2; indent-tabs-mode:t -*- 
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    2) // vim: ts=8 sw=2 smarttab
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    3) /*
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    4)  * Ceph - scalable distributed file system
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    5)  *
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    6)  * Copyright (C) 2004-2009 Sage Weil <sage@newdream.net>
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    7)  *
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    8)  * This is free software; you can redistribute it and/or
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700    9)  * modify it under the terms of the GNU Lesser General Public
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700   10)  * License version 2.1, as published by the Free Software 
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700   11)  * Foundation.  See file COPYING.
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700   12)  * 
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700   13)  */
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700   14) 
f4b9d9d8 src/rgw/rgw_common.h     (Markus Elfring      2010-06-12 15:04:11 +0200   15) #ifndef CEPH_RGW_COMMON_H
f4b9d9d8 src/rgw/rgw_common.h     (Markus Elfring      2010-06-12 15:04:11 +0200   16) #define CEPH_RGW_COMMON_H
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   17) 
d95367cb src/rgw/rgw_common.h     (Tommi Virtanen      2011-03-08 13:49:56 -0800   18) #include "common/ceph_crypto.h"
1c98da66 src/rgw/rgw_common.h     (Colin P. McCabe     2011-05-10 14:08:42 -0700   19) #include "common/debug.h"
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700   20) #include "common/perf_counters.h"
468c7dce src/rgw/rgw_common.h     (Sage Weil           2011-10-09 15:27:10 -0700   21) 
468c7dce src/rgw/rgw_common.h     (Sage Weil           2011-10-09 15:27:10 -0700   22) #include "acconfig.h"
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   23) 
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700   24) #include <errno.h>
f2424dfb src/rgw/rgw_common.h     (Yehuda Sadeh        2010-12-03 14:45:59 -0800   25) #include <string.h>
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   26) #include <string>
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   27) #include <map>
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   28) #include "include/types.h"
c9135519 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-08 16:49:49 -0800   29) #include "include/utime.h"
e345dfe0 src/rgw/rgw_common.h     (Caleb Miles         2013-02-05 14:10:03 -0500   30) #include "rgw_acl.h"
f165049c src/rgw/rgw_common.h     (Babu Shanmugam      2013-03-05 09:22:55 +0530   31) #include "rgw_cors.h"
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700   32) #include "rgw_quota.h"
fe6cd9bc src/rgw/rgw_common.h     (Yehuda Sadeh        2013-10-22 13:53:59 -0700   33) #include "rgw_string.h"
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800   34) #include "rgw_website.h"
a0d238c3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-10 22:02:20 -0700   35) #include "cls/version/cls_version_types.h"
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800   36) #include "cls/user/cls_user_types.h"
54f2e0ac src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 17:31:12 -0700   37) #include "cls/rgw/cls_rgw_types.h"
a0d238c3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-10 22:02:20 -0700   38) #include "include/rados/librados.hpp"
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   39) 
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   40) using namespace std;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   41) 
76880e3e src/rgw/rgw_common.h     (Colin P. McCabe     2011-08-04 14:43:55 -0700   42) namespace ceph {
76880e3e src/rgw/rgw_common.h     (Colin P. McCabe     2011-08-04 14:43:55 -0700   43)   class Formatter;
76880e3e src/rgw/rgw_common.h     (Colin P. McCabe     2011-08-04 14:43:55 -0700   44) }
76880e3e src/rgw/rgw_common.h     (Colin P. McCabe     2011-08-04 14:43:55 -0700   45) 
a772c8bb src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-16 10:57:48 -0700   46) using ceph::crypto::MD5;
a772c8bb src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-16 10:57:48 -0700   47) 
37c88295 src/rgw/rgw_common.h     (Sage Weil           2011-10-04 15:36:15 -0700   48) 
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700   49) #define RGW_ATTR_PREFIX  "user.rgw."
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   50) 
7ec64db4 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-13 21:59:37 -0700   51) #define RGW_HTTP_RGWX_ATTR_PREFIX "RGWX_ATTR_"
7ec64db4 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-13 21:59:37 -0700   52) #define RGW_HTTP_RGWX_ATTR_PREFIX_OUT "Rgwx-Attr-"
7ec64db4 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-13 21:59:37 -0700   53) 
7b3ff369 src/rgw/rgw_common.h     (Shivanshu Goswami   2016-02-22 21:16:11 +0000   54) #define RGW_AMZ_META_PREFIX "x-jcs-meta-"
d6d3bf06 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-03 17:36:50 -0700   55) 
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700   56) #define RGW_SYS_PARAM_PREFIX "rgwx-"
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700   57) 
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700   58) #define RGW_ATTR_ACL		RGW_ATTR_PREFIX "acl"
f165049c src/rgw/rgw_common.h     (Babu Shanmugam      2013-03-05 09:22:55 +0530   59) #define RGW_ATTR_CORS		RGW_ATTR_PREFIX "cors"
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700   60) #define RGW_ATTR_ETAG    	RGW_ATTR_PREFIX "etag"
62e11112 src/rgw/rgw_common.h     (Greg Farnum         2010-03-11 14:49:27 -0800   61) #define RGW_ATTR_BUCKETS	RGW_ATTR_PREFIX "buckets"
d6d3bf06 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-03 17:36:50 -0700   62) #define RGW_ATTR_META_PREFIX	RGW_ATTR_PREFIX RGW_AMZ_META_PREFIX
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700   63) #define RGW_ATTR_CONTENT_TYPE	RGW_ATTR_PREFIX "content_type"
f4a0b2d9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-08 16:13:04 -0700   64) #define RGW_ATTR_CACHE_CONTROL	RGW_ATTR_PREFIX "cache_control"
f4a0b2d9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-08 16:13:04 -0700   65) #define RGW_ATTR_CONTENT_DISP	RGW_ATTR_PREFIX "content_disposition"
f4a0b2d9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-08 16:13:04 -0700   66) #define RGW_ATTR_CONTENT_ENC	RGW_ATTR_PREFIX "content_encoding"
f4a0b2d9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-08 16:13:04 -0700   67) #define RGW_ATTR_CONTENT_LANG	RGW_ATTR_PREFIX "content_language"
f4a0b2d9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-08 16:13:04 -0700   68) #define RGW_ATTR_EXPIRES	RGW_ATTR_PREFIX "expires"
8d63e140 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-02 16:29:16 -0700   69) #define RGW_ATTR_ID_TAG    	RGW_ATTR_PREFIX "idtag"
70cdd5da src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-03 16:59:33 -0700   70) #define RGW_ATTR_SHADOW_OBJ    	RGW_ATTR_PREFIX "shadow_name"
c076e351 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-01 14:03:57 -0800   71) #define RGW_ATTR_MANIFEST    	RGW_ATTR_PREFIX "manifest"
4d2a05f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-08-22 17:16:05 -0700   72) #define RGW_ATTR_USER_MANIFEST  RGW_ATTR_PREFIX "user_manifest"
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700   73) 
57629b30 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-03 13:02:26 -0700   74) #define RGW_ATTR_OLH_PREFIX     RGW_ATTR_PREFIX "olh."
57629b30 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-03 13:02:26 -0700   75) 
57629b30 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-03 13:02:26 -0700   76) #define RGW_ATTR_OLH_INFO       RGW_ATTR_OLH_PREFIX "info"
57629b30 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-03 13:02:26 -0700   77) #define RGW_ATTR_OLH_VER        RGW_ATTR_OLH_PREFIX "ver"
01b8e614 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-03 17:04:46 -0800   78) #define RGW_ATTR_OLH_ID_TAG     RGW_ATTR_OLH_PREFIX "idtag"
57629b30 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-03 13:02:26 -0700   79) #define RGW_ATTR_OLH_PENDING_PREFIX RGW_ATTR_OLH_PREFIX "pending."
57629b30 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-03 13:02:26 -0700   80) 
478fe5ee src/rgw/rgw_common.h     (Yehuda Sadeh        2013-03-22 11:01:02 -0700   81) #define RGW_BUCKETS_OBJ_SUFFIX ".buckets"
fa8fa401 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-02-28 15:32:05 -0800   82) 
8f1beb1b src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-20 17:09:27 -0700   83) #define RGW_MAX_PENDING_CHUNKS  16
44cb0763 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-01-13 12:19:35 -0800   84) #define RGW_MAX_PUT_SIZE        (5ULL*1024*1024*1024)
24523913 src/rgw/rgw_common.h     (Caleb Miles         2012-12-04 16:36:17 -0500   85) #define RGW_MIN_MULTIPART_SIZE (5ULL*1024*1024)
925e2092 src/rgw/rgw_common.h     (Yehuda Sadeh        2010-07-19 16:50:43 -0700   86) 
42d873e9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-24 12:30:29 -0700   87) #define RGW_FORMAT_PLAIN        0
fc63d973 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-02-15 17:30:07 -0800   88) #define RGW_FORMAT_XML          1
fc63d973 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-02-15 17:30:07 -0800   89) #define RGW_FORMAT_JSON         2
cc544de6 src/rgw/rgw_common.h     (Robin H. Johnson    2015-08-24 02:42:56 +0000   90) #define RGW_FORMAT_HTML         3
fc63d973 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-02-15 17:30:07 -0800   91) 
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700   92) #define RGW_CAP_READ            0x1
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700   93) #define RGW_CAP_WRITE           0x2
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700   94) #define RGW_CAP_ALL             (RGW_CAP_READ | RGW_CAP_WRITE)
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700   95) 
e92e2971 src/rgw/rgw_common.h     (Robin H. Johnson    2015-06-09 03:33:22 +0000   96) #define RGW_PROTO_SWIFT          0x1
e92e2971 src/rgw/rgw_common.h     (Robin H. Johnson    2015-06-09 03:33:22 +0000   97) #define RGW_PROTO_SWIFT_AUTH     0x2
e92e2971 src/rgw/rgw_common.h     (Robin H. Johnson    2015-06-09 03:33:22 +0000   98) #define RGW_PROTO_S3             0x4
e92e2971 src/rgw/rgw_common.h     (Robin H. Johnson    2015-06-09 03:33:22 +0000   99) #define RGW_PROTO_WEBSITE     0x8
b738b72c src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-23 16:50:21 -0700  100) 
4ca8054c src/rgw/rgw_common.h     (Sage Weil           2011-06-17 09:26:32 -0700  101) #define RGW_SUSPENDED_USER_AUID (uint64_t)-2
9974b7e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 16:53:38 -0700  102) 
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  103) #define RGW_OP_TYPE_READ         0x01
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  104) #define RGW_OP_TYPE_WRITE        0x02
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  105) #define RGW_OP_TYPE_DELETE       0x04
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  106) 
c821da95 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 16:43:10 -0700  107) #define RGW_OP_TYPE_MODIFY       (RGW_OP_TYPE_WRITE | RGW_OP_TYPE_DELETE)
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  108) #define RGW_OP_TYPE_ALL          (RGW_OP_TYPE_READ | RGW_OP_TYPE_WRITE | RGW_OP_TYPE_DELETE)
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  109) 
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  110) #define RGW_DEFAULT_MAX_BUCKETS 1000
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  111) 
1d7c2041 src/rgw/rgw_common.h     (Liam Monahan        2013-10-01 17:10:05 -0400  112) #define RGW_DEFER_TO_BUCKET_ACLS_RECURSE 1
1d7c2041 src/rgw/rgw_common.h     (Liam Monahan        2013-10-01 17:10:05 -0400  113) #define RGW_DEFER_TO_BUCKET_ACLS_FULL_CONTROL 2
1d7c2041 src/rgw/rgw_common.h     (Liam Monahan        2013-10-01 17:10:05 -0400  114) 
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  115) #define STATUS_CREATED           1900
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  116) #define STATUS_ACCEPTED          1901
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  117) #define STATUS_NO_CONTENT        1902
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  118) #define STATUS_PARTIAL_CONTENT   1903
3faf6ab5 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-11 09:40:39 -0700  119) #define STATUS_REDIRECT          1904
4f9855e4 src/rgw/rgw_common.h     (Greg Farnum         2013-07-16 12:23:13 -0700  120) #define STATUS_NO_APPLY          1905
81b62b5c src/rgw/rgw_common.h     (Greg Farnum         2013-07-25 16:03:54 -0700  121) #define STATUS_APPLIED           1906
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  122) 
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  123) #define ERR_INVALID_BUCKET_NAME  2000
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  124) #define ERR_INVALID_OBJECT_NAME  2001
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  125) #define ERR_NO_SUCH_BUCKET       2002
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  126) #define ERR_METHOD_NOT_ALLOWED   2003
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  127) #define ERR_INVALID_DIGEST       2004
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  128) #define ERR_BAD_DIGEST           2005
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  129) #define ERR_UNRESOLVABLE_EMAIL   2006
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  130) #define ERR_INVALID_PART         2007
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  131) #define ERR_INVALID_PART_ORDER   2008
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  132) #define ERR_NO_SUCH_UPLOAD       2009
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  133) #define ERR_REQUEST_TIMEOUT      2010
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  134) #define ERR_LENGTH_REQUIRED      2011
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  135) #define ERR_REQUEST_TIME_SKEWED  2012
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  136) #define ERR_BUCKET_EXISTS        2013
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  137) #define ERR_BAD_URL              2014
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  138) #define ERR_PRECONDITION_FAILED  2015
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  139) #define ERR_NOT_MODIFIED         2016
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  140) #define ERR_INVALID_UTF8         2017
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  141) #define ERR_UNPROCESSABLE_ENTITY 2018
44cb0763 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-01-13 12:19:35 -0800  142) #define ERR_TOO_LARGE            2019
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  143) #define ERR_TOO_MANY_BUCKETS     2020
b415fd21 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-12 14:42:03 -0700  144) #define ERR_INVALID_REQUEST      2021
30d11f42 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-11 15:36:07 -0700  145) #define ERR_TOO_SMALL            2022
f165049c src/rgw/rgw_common.h     (Babu Shanmugam      2013-03-05 09:22:55 +0530  146) #define ERR_NOT_FOUND            2023
0f4c67f1 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-17 13:07:24 -0700  147) #define ERR_PERMANENT_REDIRECT   2024
068baae7 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-08-09 11:52:25 -0700  148) #define ERR_LOCKED               2025
bc98013f src/rgw/rgw_common.h     (Yehuda Sadeh        2013-10-01 11:45:03 -0700  149) #define ERR_QUOTA_EXCEEDED       2026
ef75d720 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-12-16 09:11:20 -0800  150) #define ERR_SIGNATURE_NO_MATCH   2027
56af795b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-12-16 12:27:54 -0800  151) #define ERR_INVALID_ACCESS_KEY   2028
8bcbfbe1 src/rgw/rgw_common.h     (Shivanshu Goswami   2016-03-09 23:30:50 +0000  152) #define ERR_BUCKET_ALREADY_OWNED 2029
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  153) #define ERR_USER_SUSPENDED       2100
0c78f0dc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 17:20:51 -0700  154) #define ERR_INTERNAL_ERROR       2200
9974b7e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 16:53:38 -0700  155) 
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  156) #ifndef UINT32_MAX
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  157) #define UINT32_MAX (4294967295)
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  158) #endif
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  159) 
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700  160) typedef void *RGWAccessHandle;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  161) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  162) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  163) /* perf counter */
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  164) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  165) extern PerfCounters *perfcounter;
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  166) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  167) extern int rgw_perf_start(CephContext *cct);
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  168) extern void rgw_perf_stop(CephContext *cct);
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  169) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  170) enum {
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  171)   l_rgw_first = 15000,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  172)   l_rgw_req,
cf566550 src/rgw/rgw_common.h     (Greg Farnum         2011-11-08 09:49:22 -0800  173)   l_rgw_failed_req,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  174) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  175)   l_rgw_get,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  176)   l_rgw_get_b,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  177)   l_rgw_get_lat,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  178) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  179)   l_rgw_put,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  180)   l_rgw_put_b,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  181)   l_rgw_put_lat,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  182) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  183)   l_rgw_qlen,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  184)   l_rgw_qactive,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  185) 
cf566550 src/rgw/rgw_common.h     (Greg Farnum         2011-11-08 09:49:22 -0800  186)   l_rgw_cache_hit,
cf566550 src/rgw/rgw_common.h     (Greg Farnum         2011-11-08 09:49:22 -0800  187)   l_rgw_cache_miss,
cf566550 src/rgw/rgw_common.h     (Greg Farnum         2011-11-08 09:49:22 -0800  188) 
c62f3dd8 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-31 14:49:12 -0700  189)   l_rgw_keystone_token_cache_hit,
c62f3dd8 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-31 14:49:12 -0700  190)   l_rgw_keystone_token_cache_miss,
c62f3dd8 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-31 14:49:12 -0700  191) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  192)   l_rgw_last,
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  193) };
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  194) 
0fe0f9db src/rgw/rgw_common.h     (Sage Weil           2011-10-11 14:00:42 -0700  195) 
232cd6b3 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-27 14:22:55 -0700  196)  /* size should be the required string size + 1 */
b9097619 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-13 14:59:00 -0700  197) extern int gen_rand_base64(CephContext *cct, char *dest, int size);
b9097619 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-13 14:59:00 -0700  198) extern int gen_rand_alphanumeric(CephContext *cct, char *dest, int size);
f6bb8255 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-04 13:36:34 -0700  199) extern int gen_rand_alphanumeric_lower(CephContext *cct, char *dest, int size);
b9097619 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-13 14:59:00 -0700  200) extern int gen_rand_alphanumeric_upper(CephContext *cct, char *dest, int size);
caefe693 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-23 17:28:14 -0800  201) extern int gen_rand_alphanumeric_no_underscore(CephContext *cct, char *dest, int size);
6b365144 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-07-20 20:27:33 -0700  202) extern int gen_rand_alphanumeric_plain(CephContext *cct, char *dest, int size);
232cd6b3 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-27 14:22:55 -0700  203) 
d139f8dd src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-04 14:05:00 -0700  204) extern int gen_rand_alphanumeric_lower(CephContext *cct, string *str, int length);
d139f8dd src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-04 14:05:00 -0700  205) 
7cc208bb src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-08 16:44:13 -0700  206) enum RGWIntentEvent {
1fe75ee6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-01-30 17:00:37 -0800  207)   DEL_OBJ = 0,
1fe75ee6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-01-30 17:00:37 -0800  208)   DEL_DIR = 1,
7cc208bb src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-08 16:44:13 -0700  209) };
7cc208bb src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-08 16:44:13 -0700  210) 
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700  211) enum RGWObjCategory {
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700  212)   RGW_OBJ_CATEGORY_NONE      = 0,
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700  213)   RGW_OBJ_CATEGORY_MAIN      = 1,
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700  214)   RGW_OBJ_CATEGORY_SHADOW    = 2,
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700  215)   RGW_OBJ_CATEGORY_MULTIMETA = 3,
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700  216) };
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700  217) 
62e11112 src/rgw/rgw_common.h     (Greg Farnum         2010-03-11 14:49:27 -0800  218) /** Store error returns for output at a different point in the program */
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700  219) struct rgw_err {
b5f6eb12 src/rgw/rgw_common.h     (Colin P. McCabe     2011-04-14 16:14:48 -0700  220)   rgw_err();
303420bf src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 10:52:14 -0700  221)   rgw_err(int http, const std::string &s3);
b5f6eb12 src/rgw/rgw_common.h     (Colin P. McCabe     2011-04-14 16:14:48 -0700  222)   void clear();
b5f6eb12 src/rgw/rgw_common.h     (Colin P. McCabe     2011-04-14 16:14:48 -0700  223)   bool is_clear() const;
9b7f223a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 11:15:11 -0700  224)   bool is_err() const;
b5f6eb12 src/rgw/rgw_common.h     (Colin P. McCabe     2011-04-14 16:14:48 -0700  225)   friend std::ostream& operator<<(std::ostream& oss, const rgw_err &err);
b5f6eb12 src/rgw/rgw_common.h     (Colin P. McCabe     2011-04-14 16:14:48 -0700  226) 
303420bf src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 10:52:14 -0700  227)   int http_ret;
8836b844 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-17 04:15:10 -0700  228)   int ret;
303420bf src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 10:52:14 -0700  229)   std::string s3_code;
b5f6eb12 src/rgw/rgw_common.h     (Colin P. McCabe     2011-04-14 16:14:48 -0700  230)   std::string message;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  231) };
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  232) 
d57cdd0c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-18 13:48:11 -0800  233) /* Helper class used for RGWHTTPArgs parsing */
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  234) class NameVal
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  235) {
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  236)    string str;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  237)    string name;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  238)    string val;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  239)  public:
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  240)     NameVal(string nv) : str(nv) {}
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  241) 
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  242)     int parse();
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  243) 
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  244)     string& get_name() { return name; }
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  245)     string& get_val() { return val; }
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  246) };
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  247) 
62e11112 src/rgw/rgw_common.h     (Greg Farnum         2010-03-11 14:49:27 -0800  248) /** Stores the XML arguments associated with the HTTP request in req_state*/
d57cdd0c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-18 13:48:11 -0800  249) class RGWHTTPArgs
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  250) {
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  251)   string str, empty_str;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  252)   map<string, string> val_map;
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  253)   map<string, string> sys_val_map;
a0d521b2 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-27 13:35:47 -0700  254)   map<string, string> sub_resources;
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  255) 
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  256)   bool has_resp_modifier;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  257)  public:
d57cdd0c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-18 13:48:11 -0800  258)   RGWHTTPArgs() : has_resp_modifier(false) {}
e92e2971 src/rgw/rgw_common.h     (Robin H. Johnson    2015-06-09 03:33:22 +0000  259) 
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  260)   /** Set the arguments; as received */
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  261)   void set(string s) {
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  262)     has_resp_modifier = false;
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  263)     val_map.clear();
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  264)     sub_resources.clear();
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  265)     str = s;
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  266)   }
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  267)   /** parse the received arguments */
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  268)   int parse();
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  269)   /** Get the value for a specific argument parameter */
ed04755a src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-24 14:34:23 -0700  270)   string& get(const string& name, bool *exists = NULL);
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  271)   string& get(const char *name, bool *exists = NULL);
9abec309 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-23 12:31:31 -0700  272)   int get_bool(const string& name, bool *val, bool *exists);
9abec309 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-23 12:31:31 -0700  273)   int get_bool(const char *name, bool *val, bool *exists);
e274e109 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-05-07 16:19:56 -0700  274)   void get_bool(const char *name, bool *val, bool def_val);
9abec309 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-23 12:31:31 -0700  275) 
d57cdd0c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-18 13:48:11 -0800  276)   /** see if a parameter is contained in this RGWHTTPArgs */
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  277)   bool exists(const char *name) {
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  278)     map<string, string>::iterator iter = val_map.find(name);
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  279)     return (iter != val_map.end());
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  280)   }
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  281)   bool sub_resource_exists(const char *name) {
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  282)     map<string, string>::iterator iter = sub_resources.find(name);
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  283)     return (iter != sub_resources.end());
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  284)   }
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  285)   map<string, string>& get_params() {
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  286)     return val_map;
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  287)   }
cb2d3660 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 23:17:12 -0700  288)   map<string, string>& get_sub_resources() { return sub_resources; }
648c3bc2 src/rgw/rgw_common.h     (Babu Shanmugam      2013-04-26 18:44:16 +0530  289)   unsigned get_num_params() {
648c3bc2 src/rgw/rgw_common.h     (Babu Shanmugam      2013-04-26 18:44:16 +0530  290)     return val_map.size();
648c3bc2 src/rgw/rgw_common.h     (Babu Shanmugam      2013-04-26 18:44:16 +0530  291)   }
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  292)   bool has_response_modifier() {
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  293)     return has_resp_modifier;
97c1562d src/rgw/rgw_common.h     (Yehuda Sadeh        2012-07-06 13:14:53 -0700  294)   }
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  295)   void set_system() { /* make all system params visible */
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  296)     map<string, string>::iterator iter;
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  297)     for (iter = sys_val_map.begin(); iter != sys_val_map.end(); ++iter) {
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  298)       val_map[iter->first] = iter->second;
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  299)     }
4dafea43 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-24 18:31:11 -0700  300)   }
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  301) };
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  302) 
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  303) class RGWConf;
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  304) 
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  305) class RGWEnv {
fe6cd9bc src/rgw/rgw_common.h     (Yehuda Sadeh        2013-10-22 13:53:59 -0700  306)   std::map<string, string, ltstr_nocase> env_map;
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  307) public:
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  308)   RGWConf *conf; 
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  309) 
cc40f115 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 14:26:16 -0700  310)   RGWEnv();
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  311)   ~RGWEnv();
fe6cd9bc src/rgw/rgw_common.h     (Yehuda Sadeh        2013-10-22 13:53:59 -0700  312)   void init(CephContext *cct);
b9097619 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-13 14:59:00 -0700  313)   void init(CephContext *cct, char **envp);
fe6cd9bc src/rgw/rgw_common.h     (Yehuda Sadeh        2013-10-22 13:53:59 -0700  314)   void set(const char *name, const char *val);
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  315)   const char *get(const char *name, const char *def_val = NULL);
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  316)   int get_int(const char *name, int def_val = 0);
5d606c22 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-14 15:55:05 -0700  317)   bool get_bool(const char *name, bool def_val = 0);
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  318)   size_t get_size(const char *name, size_t def_val = 0);
eb0f49d4 src/rgw/rgw_common.h     (Caleb Miles         2013-02-19 12:15:30 -0500  319)   bool exists(const char *name);
eb0f49d4 src/rgw/rgw_common.h     (Caleb Miles         2013-02-19 12:15:30 -0500  320)   bool exists_prefix(const char *prefix);
0c805b6c src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 13:09:08 -0700  321) 
0c805b6c src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 13:09:08 -0700  322)   void remove(const char *name);
fe6cd9bc src/rgw/rgw_common.h     (Yehuda Sadeh        2013-10-22 13:53:59 -0700  323) 
fe6cd9bc src/rgw/rgw_common.h     (Yehuda Sadeh        2013-10-22 13:53:59 -0700  324)   std::map<string, string, ltstr_nocase>& get_map() { return env_map; }
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  325) };
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  326) 
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  327) class RGWConf {
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  328)   friend class RGWEnv;
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  329) protected:
b9097619 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-13 14:59:00 -0700  330)   void init(CephContext *cct, RGWEnv * env);
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  331) public:
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  332)   RGWConf() :
1d7c2041 src/rgw/rgw_common.h     (Liam Monahan        2013-10-01 17:10:05 -0400  333)     enable_ops_log(1), enable_usage_log(1), defer_to_bucket_acls(0) {}
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  334) 
ec689e3e src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-05 11:57:35 -0700  335)   int enable_ops_log;
744a1b31 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 11:01:56 -0700  336)   int enable_usage_log;
1d7c2041 src/rgw/rgw_common.h     (Liam Monahan        2013-10-01 17:10:05 -0400  337)   uint8_t defer_to_bucket_acls;
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  338) };
059019c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-11 13:41:40 -0700  339) 
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  340) enum http_op {
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  341)   OP_GET,
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  342)   OP_PUT,
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  343)   OP_DELETE,
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  344)   OP_HEAD,
9e8484e8 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-26 15:18:48 -0700  345)   OP_POST,
87941128 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-11-10 14:56:10 -0800  346)   OP_COPY,
f165049c src/rgw/rgw_common.h     (Babu Shanmugam      2013-03-05 09:22:55 +0530  347)   OP_OPTIONS,
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  348)   OP_UNKNOWN,
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  349) };
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  350) 
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700  351) class RGWAccessControlPolicy;
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  352) class JSONObj;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  353) 
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  354) struct RGWAccessKey {
6dcf462c src/rgw/rgw_common.h     (Robin H. Johnson    2014-01-18 17:49:06 -0800  355)   string id; // AccessKey
6dcf462c src/rgw/rgw_common.h     (Robin H. Johnson    2014-01-18 17:49:06 -0800  356)   string key; // SecretKey
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  357)   string subuser;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  358) 
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  359)   RGWAccessKey() {}
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  360)   void encode(bufferlist& bl) const {
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  361)     ENCODE_START(2, 2, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  362)     ::encode(id, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  363)     ::encode(key, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  364)     ::encode(subuser, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  365)     ENCODE_FINISH(bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  366)   }
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  367) 
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  368)   void decode(bufferlist::iterator& bl) {
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  369)      DECODE_START_LEGACY_COMPAT_LEN_32(2, 2, 2, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  370)      ::decode(id, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  371)      ::decode(key, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  372)      ::decode(subuser, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  373)      DECODE_FINISH(bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  374)   }
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  375)   void dump(Formatter *f) const;
a7096f8f src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-20 12:13:31 -0700  376)   void dump_plain(Formatter *f) const;
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  377)   void dump(Formatter *f, const string& user, bool swift) const;
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  378)   static void generate_test_instances(list<RGWAccessKey*>& o);
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  379) 
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  380)   void decode_json(JSONObj *obj);
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  381)   void decode_json(JSONObj *obj, bool swift);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  382) };
60b1071d src/rgw/rgw_common.h     (Daniel J. Hofmann   2014-05-09 15:07:15 +0200  383) WRITE_CLASS_ENCODER(RGWAccessKey)
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  384) 
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  385) struct RGWSubUser {
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  386)   string name;
c167a28d src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-23 15:12:48 -0700  387)   uint32_t perm_mask;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  388) 
c167a28d src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-23 15:12:48 -0700  389)   RGWSubUser() : perm_mask(0) {}
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  390)   void encode(bufferlist& bl) const {
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  391)     ENCODE_START(2, 2, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  392)     ::encode(name, bl);
c167a28d src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-23 15:12:48 -0700  393)     ::encode(perm_mask, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  394)     ENCODE_FINISH(bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  395)   }
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  396) 
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  397)   void decode(bufferlist::iterator& bl) {
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  398)      DECODE_START_LEGACY_COMPAT_LEN_32(2, 2, 2, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  399)      ::decode(name, bl);
c167a28d src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-23 15:12:48 -0700  400)      ::decode(perm_mask, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  401)      DECODE_FINISH(bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  402)   }
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  403)   void dump(Formatter *f) const;
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  404)   void dump(Formatter *f, const string& user) const;
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  405)   static void generate_test_instances(list<RGWSubUser*>& o);
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  406) 
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  407)   void decode_json(JSONObj *obj);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  408) };
60b1071d src/rgw/rgw_common.h     (Daniel J. Hofmann   2014-05-09 15:07:15 +0200  409) WRITE_CLASS_ENCODER(RGWSubUser)
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  410) 
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  411) class RGWUserCaps
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  412) {
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  413)   map<string, uint32_t> caps;
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  414) 
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  415)   int get_cap(const string& cap, string& type, uint32_t *perm);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  416)   int add_cap(const string& cap);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  417)   int remove_cap(const string& cap);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  418) public:
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  419)   static int parse_cap_perm(const string& str, uint32_t *perm);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  420)   int add_from_string(const string& str);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  421)   int remove_from_string(const string& str);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  422) 
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  423)   void encode(bufferlist& bl) const {
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  424)      ENCODE_START(1, 1, bl);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  425)      ::encode(caps, bl);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  426)      ENCODE_FINISH(bl);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  427)   }
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  428)   void decode(bufferlist::iterator& bl) {
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  429)      DECODE_START(1, bl);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  430)      ::decode(caps, bl);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  431)      DECODE_FINISH(bl);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  432)   }
511e639e src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 11:57:04 -0700  433)   int check_cap(const string& cap, uint32_t perm);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  434)   void dump(Formatter *f) const;
b07f3cda src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-12 09:40:12 -0800  435)   void dump(Formatter *f, const char *name) const;
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  436) 
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  437)   void decode_json(JSONObj *obj);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  438) };
60b1071d src/rgw/rgw_common.h     (Daniel J. Hofmann   2014-05-09 15:07:15 +0200  439) WRITE_CLASS_ENCODER(RGWUserCaps)
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  440) 
3e5cead0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-29 08:11:59 -0700  441) void encode_json(const char *name, const obj_version& v, Formatter *f);
b07f3cda src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-12 09:40:12 -0800  442) void encode_json(const char *name, const RGWUserCaps& val, Formatter *f);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  443) 
3e5cead0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-29 08:11:59 -0700  444) void decode_json_obj(obj_version& v, JSONObj *obj);
3e5cead0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-29 08:11:59 -0700  445) 
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700  446) struct RGWUserInfo
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  447) {
edc92490 src/rgw/rgw_common.h     (Sage Weil           2010-05-07 14:33:42 -0700  448)   uint64_t auid;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  449)   string user_id;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  450)   string display_name;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  451)   string user_email;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  452)   map<string, RGWAccessKey> access_keys;
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  453)   map<string, RGWAccessKey> swift_keys;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  454)   map<string, RGWSubUser> subusers;
9974b7e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 16:53:38 -0700  455)   __u8 suspended;
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  456)   uint32_t max_buckets;
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  457)   uint32_t op_mask;
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  458)   RGWUserCaps caps;
903d4a04 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-22 11:08:33 -0700  459)   __u8 system;
2fcbf2ba src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 16:16:47 -0700  460)   string default_placement;
2fcbf2ba src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 16:16:47 -0700  461)   list<string> placement_tags;
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  462)   RGWQuotaInfo bucket_quota;
7ccb513c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-09 10:35:53 -0800  463)   map<int, string> temp_url_keys;
15c01895 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-10 15:11:08 -0800  464)   RGWQuotaInfo user_quota;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  465) 
d30fc4bd src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-03 17:09:56 -0700  466)   RGWUserInfo() : auid(0), suspended(0), max_buckets(RGW_DEFAULT_MAX_BUCKETS), op_mask(RGW_OP_TYPE_ALL), system(0) {}
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700  467) 
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  468)   void encode(bufferlist& bl) const {
cacdfd91 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-27 11:27:56 -0800  469)      ENCODE_START(16, 9, bl);
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700  470)      ::encode(auid, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  471)      string access_key;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  472)      string secret_key;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  473)      if (!access_keys.empty()) {
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  474)        map<string, RGWAccessKey>::const_iterator iter = access_keys.begin();
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  475)        const RGWAccessKey& k = iter->second;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  476)        access_key = k.id;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  477)        secret_key = k.key;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  478)      }
544ce94a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 17:20:44 -0700  479)      ::encode(access_key, bl);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  480)      ::encode(secret_key, bl);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  481)      ::encode(display_name, bl);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  482)      ::encode(user_email, bl);
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  483)      string swift_name;
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  484)      string swift_key;
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  485)      if (!swift_keys.empty()) {
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  486)        map<string, RGWAccessKey>::const_iterator iter = swift_keys.begin();
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  487)        const RGWAccessKey& k = iter->second;
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  488)        swift_name = k.id;
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  489)        swift_key = k.key;
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  490)      }
ba7ab2f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-02 14:56:50 -0700  491)      ::encode(swift_name, bl);
ba7ab2f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-02 14:56:50 -0700  492)      ::encode(swift_key, bl);
544ce94a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 17:20:44 -0700  493)      ::encode(user_id, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  494)      ::encode(access_keys, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  495)      ::encode(subusers, bl);
9974b7e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 16:53:38 -0700  496)      ::encode(suspended, bl);
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  497)      ::encode(swift_keys, bl);
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  498)      ::encode(max_buckets, bl);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  499)      ::encode(caps, bl);
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  500)      ::encode(op_mask, bl);
903d4a04 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-22 11:08:33 -0700  501)      ::encode(system, bl);
2fcbf2ba src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 16:16:47 -0700  502)      ::encode(default_placement, bl);
2fcbf2ba src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 16:16:47 -0700  503)      ::encode(placement_tags, bl);
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  504)      ::encode(bucket_quota, bl);
7ccb513c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-09 10:35:53 -0800  505)      ::encode(temp_url_keys, bl);
15c01895 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-10 15:11:08 -0800  506)      ::encode(user_quota, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  507)      ENCODE_FINISH(bl);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  508)   }
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  509)   void decode(bufferlist::iterator& bl) {
cacdfd91 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-27 11:27:56 -0800  510)      DECODE_START_LEGACY_COMPAT_LEN_32(16, 9, 9, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  511)      if (struct_v >= 2) ::decode(auid, bl);
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700  512)      else auid = CEPH_AUTH_UID_DEFAULT;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  513)      string access_key;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  514)      string secret_key;
544ce94a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 17:20:44 -0700  515)     ::decode(access_key, bl);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  516)     ::decode(secret_key, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  517)     if (struct_v < 6) {
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  518)       RGWAccessKey k;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  519)       k.id = access_key;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  520)       k.key = secret_key;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  521)       access_keys[access_key] = k;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  522)     }
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  523)     ::decode(display_name, bl);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  524)     ::decode(user_email, bl);
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  525)     string swift_name;
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  526)     string swift_key;
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  527)     if (struct_v >= 3) ::decode(swift_name, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  528)     if (struct_v >= 4) ::decode(swift_key, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  529)     if (struct_v >= 5)
544ce94a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 17:20:44 -0700  530)       ::decode(user_id, bl);
544ce94a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 17:20:44 -0700  531)     else
544ce94a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-04-15 17:20:44 -0700  532)       user_id = access_key;
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  533)     if (struct_v >= 6) {
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  534)       ::decode(access_keys, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  535)       ::decode(subusers, bl);
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  536)     }
9974b7e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 16:53:38 -0700  537)     suspended = 0;
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  538)     if (struct_v >= 7) {
9974b7e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 16:53:38 -0700  539)       ::decode(suspended, bl);
9974b7e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 16:53:38 -0700  540)     }
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  541)     if (struct_v >= 8) {
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  542)       ::decode(swift_keys, bl);
f883e638 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-11 10:49:27 -0700  543)     }
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  544)     if (struct_v >= 10) {
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  545)       ::decode(max_buckets, bl);
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  546)     } else {
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  547)       max_buckets = RGW_DEFAULT_MAX_BUCKETS;
5db4509b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-06-11 23:31:09 -0700  548)     }
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  549)     if (struct_v >= 11) {
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  550)       ::decode(caps, bl);
d22aa6c9 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-25 10:55:19 -0700  551)     }
903d4a04 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-22 11:08:33 -0700  552)     if (struct_v >= 12) {
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  553)       ::decode(op_mask, bl);
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  554)     } else {
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700  555)       op_mask = RGW_OP_TYPE_ALL;
903d4a04 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-22 11:08:33 -0700  556)     }
d30fc4bd src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-03 17:09:56 -0700  557)     system = 0;
2fcbf2ba src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 16:16:47 -0700  558)     if (struct_v >= 13) {
d30fc4bd src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-03 17:09:56 -0700  559)       ::decode(system, bl);
2fcbf2ba src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 16:16:47 -0700  560)       ::decode(default_placement, bl);
2fcbf2ba src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 16:16:47 -0700  561)       ::decode(placement_tags, bl); /* tags of allowed placement rules */
2fcbf2ba src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 16:16:47 -0700  562)     }
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  563)     if (struct_v >= 14) {
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  564)       ::decode(bucket_quota, bl);
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  565)     }
2626101f src/rgw/rgw_common.h     (Yehuda Sadeh        2013-11-25 13:41:50 -0800  566)     if (struct_v >= 15) {
7ccb513c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-09 10:35:53 -0800  567)      ::decode(temp_url_keys, bl);
2626101f src/rgw/rgw_common.h     (Yehuda Sadeh        2013-11-25 13:41:50 -0800  568)     }
cacdfd91 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-27 11:27:56 -0800  569)     if (struct_v >= 16) {
15c01895 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-10 15:11:08 -0800  570)       ::decode(user_quota, bl);
15c01895 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-10 15:11:08 -0800  571)     }
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  572)     DECODE_FINISH(bl);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  573)   }
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  574)   void dump(Formatter *f) const;
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  575)   static void generate_test_instances(list<RGWUserInfo*>& o);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  576) 
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  577)   void decode_json(JSONObj *obj);
da337013 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-02-06 12:48:01 -0800  578) 
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  579)   void clear() {
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  580)     user_id.clear();
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  581)     display_name.clear();
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  582)     user_email.clear();
83a6efef src/rgw/rgw_common.h     (Greg Farnum         2010-03-26 16:29:11 -0700  583)     auid = CEPH_AUTH_UID_DEFAULT;
2cf5048f src/rgw/rgw_common.h     (Yehuda Sadeh        2011-05-20 15:15:48 -0700  584)     access_keys.clear();
9974b7e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 16:53:38 -0700  585)     suspended = 0;
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  586)   }
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  587) };
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700  588) WRITE_CLASS_ENCODER(RGWUserInfo)
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700  589) 
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  590) struct rgw_bucket {
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  591)   std::string name;
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  592)   std::string data_pool;
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  593)   std::string data_extra_pool; /* if not set, then we should use data_pool instead */
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  594)   std::string index_pool;
25499b64 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-19 16:41:44 -0700  595)   std::string marker;
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  596)   std::string bucket_id;
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  597) 
68730d80 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-26 16:40:34 -0700  598)   std::string oid; /*
68730d80 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-26 16:40:34 -0700  599)                     * runtime in-memory only info. If not empty, points to the bucket instance object
68730d80 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-26 16:40:34 -0700  600)                     */
68730d80 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-26 16:40:34 -0700  601) 
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  602)   rgw_bucket() { }
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800  603)   rgw_bucket(const cls_user_bucket& b) {
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800  604)     name = b.name;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800  605)     data_pool = b.data_pool;
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  606)     data_extra_pool = b.data_extra_pool;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800  607)     index_pool = b.index_pool;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800  608)     marker = b.marker;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800  609)     bucket_id = b.bucket_id;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800  610)   }
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  611)   rgw_bucket(const char *n) : name(n) {
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  612)     assert(*n == '.'); // only rgw private buckets should be initialized without pool
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  613)     data_pool = index_pool = n;
25499b64 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-19 16:41:44 -0700  614)     marker = "";
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  615)   }
0f4c67f1 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-17 13:07:24 -0700  616)   rgw_bucket(const char *n, const char *dp, const char *ip, const char *m, const char *id, const char *h) :
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  617)     name(n), data_pool(dp), index_pool(ip), marker(m), bucket_id(id) {}
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  618) 
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800  619)   void convert(cls_user_bucket *b) {
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800  620)     b->name = name;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800  621)     b->data_pool = data_pool;
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  622)     b->data_extra_pool = data_extra_pool;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800  623)     b->index_pool = index_pool;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800  624)     b->marker = marker;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800  625)     b->bucket_id = bucket_id;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800  626)   }
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800  627) 
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  628)   void encode(bufferlist& bl) const {
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  629)      ENCODE_START(7, 3, bl);
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  630)     ::encode(name, bl);
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  631)     ::encode(data_pool, bl);
25499b64 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-19 16:41:44 -0700  632)     ::encode(marker, bl);
c2fbde4d src/rgw/rgw_common.h     (Greg Farnum         2011-09-28 10:50:48 -0700  633)     ::encode(bucket_id, bl);
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  634)     ::encode(index_pool, bl);
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  635)     ::encode(data_extra_pool, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  636)     ENCODE_FINISH(bl);
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  637)   }
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  638)   void decode(bufferlist::iterator& bl) {
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  639)     DECODE_START_LEGACY_COMPAT_LEN(7, 3, 3, bl);
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  640)     ::decode(name, bl);
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  641)     ::decode(data_pool, bl);
c2fbde4d src/rgw/rgw_common.h     (Greg Farnum         2011-09-28 10:50:48 -0700  642)     if (struct_v >= 2) {
25499b64 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-19 16:41:44 -0700  643)       ::decode(marker, bl);
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  644)       if (struct_v <= 3) {
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  645)         uint64_t id;
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  646)         ::decode(id, bl);
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  647)         char buf[16];
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  648)         snprintf(buf, sizeof(buf), "%llu", (long long)id);
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  649)         bucket_id = buf;
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  650)       } else {
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  651)         ::decode(bucket_id, bl);
6a5cbec3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-20 15:15:09 -0700  652)       }
c2fbde4d src/rgw/rgw_common.h     (Greg Farnum         2011-09-28 10:50:48 -0700  653)     }
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  654)     if (struct_v >= 5) {
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  655)       ::decode(index_pool, bl);
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  656)     } else {
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  657)       index_pool = data_pool;
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  658)     }
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  659)     if (struct_v >= 7) {
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  660)       ::decode(data_extra_pool, bl);
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  661)     }
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  662)     DECODE_FINISH(bl);
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  663)   }
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  664) 
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  665)   const string& get_data_extra_pool() {
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  666)     if (data_extra_pool.empty()) {
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  667)       return data_pool;
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  668)     }
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  669)     return data_extra_pool;
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  670)   }
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  671) 
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  672)   void dump(Formatter *f) const;
770d94d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-08 20:40:48 -0700  673)   void decode_json(JSONObj *obj);
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  674)   static void generate_test_instances(list<rgw_bucket*>& o);
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700  675) 
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700  676)   bool operator<(const rgw_bucket& b) const {
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700  677)     return name.compare(b.name) < 0;
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700  678)   }
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  679) };
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  680) WRITE_CLASS_ENCODER(rgw_bucket)
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  681) 
f106e1a5 src/rgw/rgw_common.h     (Danny Al-Gaaf       2013-03-11 15:35:53 +0100  682) inline ostream& operator<<(ostream& out, const rgw_bucket &b) {
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  683)   out << b.name;
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  684)   if (b.name.compare(b.data_pool)) {
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  685)     out << "(@";
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  686)     string s;
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  687)     if (!b.index_pool.empty() && b.data_pool.compare(b.index_pool))
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  688)       s = "i=" + b.index_pool;
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  689)     if (!b.data_extra_pool.empty() && b.data_pool.compare(b.data_extra_pool)) {
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  690)       if (!s.empty()) {
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  691)         s += ",";
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  692)       }
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  693)       s += "e=" + b.data_extra_pool;
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  694)     }
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  695)     if (!s.empty()) {
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  696)       out << "{"  << s << "}";
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  697)     }
3677076b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 12:01:31 -0700  698) 
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  699)     out << b.data_pool << "[" << b.marker << "])";
988dab3e src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-18 14:31:50 -0700  700)   }
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  701)   return out;
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  702) }
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700  703) 
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  704) struct rgw_bucket_shard {
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  705)   rgw_bucket bucket;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  706)   int shard_id;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  707) 
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  708)   rgw_bucket_shard() : shard_id(-1) {}
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  709)   rgw_bucket_shard(rgw_bucket& _b, int _sid) : bucket(_b), shard_id(_sid) {}
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  710) 
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  711)   bool operator<(const rgw_bucket_shard& b) const {
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  712)     if (bucket < b.bucket) {
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  713)       return true;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  714)     }
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  715)     if (b.bucket < bucket) {
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  716)       return false;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  717)     }
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  718)     return shard_id < b.shard_id;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  719)   }
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  720) };
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  721) 
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  722) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  723) struct RGWObjVersionTracker {
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  724)   obj_version read_version;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  725)   obj_version write_version;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  726) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  727)   obj_version *version_for_read() {
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  728)     return &read_version;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  729)   }
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  730) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  731)   obj_version *version_for_write() {
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  732)     if (write_version.ver == 0)
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  733)       return NULL;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  734) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  735)     return &write_version;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  736)   }
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  737) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  738)   obj_version *version_for_check() {
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  739)     if (read_version.ver == 0)
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  740)       return NULL;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  741) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  742)     return &read_version;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  743)   }
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  744) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  745)   void prepare_op_for_read(librados::ObjectReadOperation *op);
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  746)   void prepare_op_for_write(librados::ObjectWriteOperation *op);
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  747) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  748)   void apply_write() {
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  749)     read_version = write_version;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  750)     write_version = obj_version();
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  751)   }
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  752) 
859ed33e src/rgw/rgw_common.h     (Yehuda Sadeh        2014-02-19 08:11:56 -0800  753)   void clear() {
859ed33e src/rgw/rgw_common.h     (Yehuda Sadeh        2014-02-19 08:11:56 -0800  754)     read_version = obj_version();
859ed33e src/rgw/rgw_common.h     (Yehuda Sadeh        2014-02-19 08:11:56 -0800  755)     write_version = obj_version();
859ed33e src/rgw/rgw_common.h     (Yehuda Sadeh        2014-02-19 08:11:56 -0800  756)   }
859ed33e src/rgw/rgw_common.h     (Yehuda Sadeh        2014-02-19 08:11:56 -0800  757) 
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  758)   void generate_new_write_ver(CephContext *cct);
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  759) };
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  760) 
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700  761) enum RGWBucketFlags {
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700  762)   BUCKET_SUSPENDED = 0x1,
8d25ec63 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-29 15:10:02 -0700  763)   BUCKET_VERSIONED = 0x2,
8d25ec63 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-29 15:10:02 -0700  764)   BUCKET_VERSIONS_SUSPENDED = 0x4,
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700  765) };
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700  766) 
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  767) struct RGWBucketInfo
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  768) {
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  769)   enum BIShardsHashType {
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  770)     MOD = 0
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  771)   };
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  772) 
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  773)   rgw_bucket bucket;
0eb433d4 src/rgw/rgw_common.h     (Greg Farnum         2011-09-28 13:51:20 -0700  774)   string owner;
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700  775)   uint32_t flags;
c8ac2879 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-14 18:26:37 -0700  776)   string region;
a2cf14fe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-15 18:41:21 -0700  777)   time_t creation_time;
d7af5e14 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 20:54:28 -0700  778)   string placement_rule;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  779)   bool has_instance_obj;
dab57ef8 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 18:52:39 -0700  780)   RGWObjVersionTracker objv_tracker; /* we don't need to serialize this, for runtime tracking */
7cd0bd85 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-18 17:40:52 -0700  781)   obj_version ep_objv; /* entry point object version, for runtime tracking only */
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  782)   RGWQuotaInfo quota;
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  783) 
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  784)   // Represents the number of bucket index object shards:
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  785)   //   - value of 0 indicates there is no sharding (this is by default before this
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  786)   //     feature is implemented).
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  787)   //   - value of UINT32_T::MAX indicates this is a blind bucket.
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  788)   uint32_t num_shards;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  789) 
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  790)   // Represents the bucket index shard hash type.
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  791)   uint8_t bucket_index_shard_hash_type;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  792) 
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  793)   // Represents the shard number for blind bucket.
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  794)   const static uint32_t NUM_SHARDS_BLIND_BUCKET;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  795) 
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  796)   bool has_website;
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  797)   RGWBucketWebsiteConf website_conf;
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  798) 
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  799)   void encode(bufferlist& bl) const {
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  800)      ENCODE_START(12, 4, bl);
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  801)      ::encode(bucket, bl);
560f90c5 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 16:32:14 -0700  802)      ::encode(owner, bl);
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700  803)      ::encode(flags, bl);
c8ac2879 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-14 18:26:37 -0700  804)      ::encode(region, bl);
cfc1f2ee src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-01 11:01:39 -0700  805)      uint64_t ct = (uint64_t)creation_time;
cfc1f2ee src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-01 11:01:39 -0700  806)      ::encode(ct, bl);
d7af5e14 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 20:54:28 -0700  807)      ::encode(placement_rule, bl);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  808)      ::encode(has_instance_obj, bl);
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  809)      ::encode(quota, bl);
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  810)      ::encode(num_shards, bl);
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  811)      ::encode(bucket_index_shard_hash_type, bl);
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  812)      ::encode(has_website, bl);
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  813)      if (has_website) {
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  814)        ::encode(website_conf, bl);
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  815)      }
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  816)      ENCODE_FINISH(bl);
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  817)   }
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  818)   void decode(bufferlist::iterator& bl) {
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  819)     DECODE_START_LEGACY_COMPAT_LEN_32(12, 4, 4, bl);
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  820)      ::decode(bucket, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  821)      if (struct_v >= 2)
560f90c5 src/rgw/rgw_common.h     (Sage Weil           2011-09-29 16:32:14 -0700  822)        ::decode(owner, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  823)      if (struct_v >= 3)
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700  824)        ::decode(flags, bl);
c8ac2879 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-14 18:26:37 -0700  825)      if (struct_v >= 5)
c8ac2879 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-14 18:26:37 -0700  826)        ::decode(region, bl);
cfc1f2ee src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-01 11:01:39 -0700  827)      if (struct_v >= 6) {
cfc1f2ee src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-01 11:01:39 -0700  828)        uint64_t ct;
cfc1f2ee src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-01 11:01:39 -0700  829)        ::decode(ct, bl);
cfc1f2ee src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-01 11:01:39 -0700  830)        creation_time = (time_t)ct;
cfc1f2ee src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-01 11:01:39 -0700  831)      }
d7af5e14 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 20:54:28 -0700  832)      if (struct_v >= 7)
d7af5e14 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-21 20:54:28 -0700  833)        ::decode(placement_rule, bl);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  834)      if (struct_v >= 8)
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  835)        ::decode(has_instance_obj, bl);
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  836)      if (struct_v >= 9)
434ad764 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-27 14:51:43 -0700  837)        ::decode(quota, bl);
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  838)      if (struct_v >= 10)
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  839)        ::decode(num_shards, bl);
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  840)      if (struct_v >= 11)
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800  841)        ::decode(bucket_index_shard_hash_type, bl);
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  842)      if (struct_v >= 12) {
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  843)        ::decode(has_website, bl);
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  844)        if (has_website) {
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  845)          ::decode(website_conf, bl);
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  846)        } else {
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  847)          website_conf = RGWBucketWebsiteConf();
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  848)        }
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  849)      }
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800  850)      DECODE_FINISH(bl);
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  851)   }
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  852)   void dump(Formatter *f) const;
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800  853)   static void generate_test_instances(list<RGWBucketInfo*>& o);
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700  854) 
770d94d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-08 20:40:48 -0700  855)   void decode_json(JSONObj *obj);
770d94d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-08 20:40:48 -0700  856) 
8d25ec63 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-29 15:10:02 -0700  857)   bool versioned() { return (flags & BUCKET_VERSIONED) != 0; }
7f139286 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-10-27 17:09:57 -0700  858)   int versioning_status() { return flags & (BUCKET_VERSIONED | BUCKET_VERSIONS_SUSPENDED); }
7f139286 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-10-27 17:09:57 -0700  859)   bool versioning_enabled() { return versioning_status() == BUCKET_VERSIONED; }
8d25ec63 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-29 15:10:02 -0700  860) 
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  861)   RGWBucketInfo() : flags(0), creation_time(0), has_instance_obj(false), num_shards(0), bucket_index_shard_hash_type(MOD),
c0bacef4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-26 16:34:04 -0800  862)                     has_website(false) {}
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  863) };
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  864) WRITE_CLASS_ENCODER(RGWBucketInfo)
3ebe6b77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-18 13:21:31 -0700  865) 
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  866) struct RGWBucketEntryPoint
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  867) {
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  868)   rgw_bucket bucket;
7e41c103 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 17:27:34 -0700  869)   string owner;
63e81afe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 23:43:50 -0700  870)   time_t creation_time;
6673b2d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 14:00:59 -0700  871)   bool linked;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  872) 
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  873)   bool has_bucket_info;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  874)   RGWBucketInfo old_bucket_info;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  875) 
6673b2d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 14:00:59 -0700  876)   RGWBucketEntryPoint() : creation_time(0), linked(false), has_bucket_info(false) {}
ad640672 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 13:12:59 -0700  877) 
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  878)   void encode(bufferlist& bl) const {
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  879)     ENCODE_START(8, 8, bl);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  880)     ::encode(bucket, bl);
7e41c103 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 17:27:34 -0700  881)     ::encode(owner, bl);
6673b2d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 14:00:59 -0700  882)     ::encode(linked, bl);
63e81afe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 23:43:50 -0700  883)     uint64_t ctime = (uint64_t)creation_time;
63e81afe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 23:43:50 -0700  884)     ::encode(ctime, bl);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  885)     ENCODE_FINISH(bl);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  886)   }
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  887)   void decode(bufferlist::iterator& bl) {
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  888)     bufferlist::iterator orig_iter = bl;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  889)     DECODE_START_LEGACY_COMPAT_LEN_32(8, 4, 4, bl);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  890)     if (struct_v < 8) {
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  891)       /* ouch, old entry, contains the bucket info itself */
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  892)       old_bucket_info.decode(orig_iter);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  893)       has_bucket_info = true;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  894)       return;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  895)     }
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  896)     has_bucket_info = false;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  897)     ::decode(bucket, bl);
7e41c103 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 17:27:34 -0700  898)     ::decode(owner, bl);
6673b2d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 14:00:59 -0700  899)     ::decode(linked, bl);
63e81afe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 23:43:50 -0700  900)     uint64_t ctime;
63e81afe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 23:43:50 -0700  901)     ::decode(ctime, bl);
63e81afe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-24 23:43:50 -0700  902)     creation_time = (uint64_t)ctime;
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  903)     DECODE_FINISH(bl);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  904)   }
71869c4b src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 21:00:00 -0700  905) 
71869c4b src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 21:00:00 -0700  906)   void dump(Formatter *f) const;
71869c4b src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-23 21:00:00 -0700  907)   void decode_json(JSONObj *obj);
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  908) };
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  909) WRITE_CLASS_ENCODER(RGWBucketEntryPoint)
c3260b27 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-22 22:47:48 -0700  910) 
4aee3fa2 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-09 21:37:34 -0800  911) struct RGWStorageStats
0b1ad608 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-24 16:41:10 -0700  912) {
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700  913)   RGWObjCategory category;
0b1ad608 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-24 16:41:10 -0700  914)   uint64_t num_kb;
7a32cc60 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-11-08 13:42:55 -0800  915)   uint64_t num_kb_rounded;
0b1ad608 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-24 16:41:10 -0700  916)   uint64_t num_objects;
80659cce src/rgw/rgw_common.h     (Yehuda Sadeh        2013-10-02 16:34:40 -0700  917) 
c13634e8 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-10 13:44:56 -0800  918)   RGWStorageStats() : category(RGW_OBJ_CATEGORY_NONE), num_kb(0), num_kb_rounded(0), num_objects(0) {}
7e13ac8e src/rgw/rgw_common.h     (Ray Lv              2014-09-10 15:33:22 +0800  919) 
7e13ac8e src/rgw/rgw_common.h     (Ray Lv              2014-09-10 15:33:22 +0800  920)   void dump(Formatter *f) const;
0b1ad608 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-24 16:41:10 -0700  921) };
0b1ad608 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-24 16:41:10 -0700  922) 
fc63d973 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-02-15 17:30:07 -0800  923) struct req_state;
fc63d973 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-02-15 17:30:07 -0800  924) 
e1666d04 src/rgw/rgw_common.h     (Christophe Courtaut 2013-08-09 11:58:58 +0200  925) class RGWEnv;
a9c9f96b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-19 12:36:44 -0700  926) 
a9c9f96b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-09-19 12:36:44 -0700  927) class RGWClientIO;
43575c7a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-07-19 14:02:11 -0700  928) 
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  929) struct req_info {
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  930)   RGWEnv *env;
d57cdd0c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-11-18 13:48:11 -0800  931)   RGWHTTPArgs args;
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  932)   map<string, string> x_meta_map;
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  933) 
a3afb3f5 src/rgw/rgw_common.h     (Sage Weil           2015-06-09 14:15:10 -0400  934)   string host;
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  935)   const char *method;
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  936)   string script_uri;
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  937)   string request_uri;
8a2eb184 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-07-22 13:33:33 -0700  938)   string effective_uri;
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  939)   string request_params;
90c5869b src/rgw/rgw_common.h     (Yehuda Sadeh        2014-02-19 18:00:10 -0800  940)   string domain;
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  941) 
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  942)   req_info(CephContext *cct, RGWEnv *_env);
580a08c6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 23:14:35 -0700  943)   void rebuild_from(req_info& src);
f67bfa24 src/rgw/rgw_common.h     (Dmytro Iurchenko    2015-02-03 17:54:38 +0200  944)   void init_meta_info(bool *found_bad_meta);
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  945) };
c812bb51 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-23 11:39:13 -0700  946) 
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  947) struct rgw_obj_key {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  948)   string name;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  949)   string instance;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  950) 
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  951)   rgw_obj_key() {}
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  952)   rgw_obj_key(const string& n) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  953)     set(n);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  954)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  955)   rgw_obj_key(const string& n, const string& i) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  956)     set(n, i);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  957)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  958) 
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  959)   void set(const cls_rgw_obj_key& k) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  960)     name = k.name;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  961)     instance = k.instance;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  962)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  963) 
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  964)   void transform(cls_rgw_obj_key *k) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  965)     k->name = name;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  966)     k->instance = instance;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  967)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  968) 
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  969)   void set(const string& n) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  970)     name = n;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  971)     instance.clear();
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  972)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  973) 
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  974)   void set(const string& n, const string& i) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  975)     name = n;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  976)     instance = i;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  977)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  978) 
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  979)   bool empty() {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  980)     return name.empty();
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  981)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  982)   bool operator==(const rgw_obj_key& k) const {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  983)     return (name.compare(k.name) == 0) &&
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  984)            (instance.compare(k.instance) == 0);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  985)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  986)   bool operator<(const rgw_obj_key& k) const {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  987)     int r = name.compare(k.name);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  988)     if (r == 0) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  989)       r = instance.compare(k.instance);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  990)     }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  991)     return (r < 0);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  992)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  993)   void encode(bufferlist& bl) const {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  994)     ENCODE_START(1, 1, bl);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  995)     ::encode(name, bl);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  996)     ::encode(instance, bl);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  997)     ENCODE_FINISH(bl);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  998)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700  999)   void decode(bufferlist::iterator& bl) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1000)     DECODE_START(1, bl);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1001)     ::decode(name, bl);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1002)     ::decode(instance, bl);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1003)     DECODE_FINISH(bl);
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1004)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1005)   void dump(Formatter *f) const;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1006) };
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1007) WRITE_CLASS_ENCODER(rgw_obj_key)
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1008) 
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1009) inline ostream& operator<<(ostream& out, const rgw_obj_key &o) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1010)   if (o.instance.empty()) {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1011)     return out << o.name;
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1012)   } else {
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1013)     return out << o.name << "[" << o.instance << "]";
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1014)   }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1015) }
7f26ab76 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 14:18:41 -0700 1016) 
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1017) /* Holds info on whether the request should be
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1018)  * validated via EC2 signature or Auth tokens.
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1019)  * Holds value when the action is COPY
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1020)  * Holds value when the token to be validated is from a presigned URL */
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1021) 
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1022) class authorization_method {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1023)   private:
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1024)     bool _token_validation;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1025)     bool _copy_action;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1026)     bool _url_type_token;
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1027)     bool _infinite_url_type_token;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1028)     bool _acl_main_override;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1029)     bool _acl_copy_override;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1030)     string _token;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1031)     string _copy_source;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1032) 
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1033)   public:
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1034)     inline bool get_token_validation()
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1035)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1036)       return _token_validation;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1037)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1038)     inline void set_token_validation(bool method)
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1039)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1040)       _token_validation = method;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1041)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1042)     inline string get_token()
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1043)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1044)       return _token;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1045)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1046)     inline void set_token(string tok)
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1047)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1048)       _token = tok;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1049)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1050)     inline bool get_copy_action()
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1051)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1052)       return _copy_action;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1053)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1054)     inline void set_copy_action(bool action)
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1055)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1056)       _copy_action = action;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1057)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1058)     inline string get_copy_source()
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1059)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1060)       return _copy_source;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1061)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1062)     inline void set_copy_source(string source)
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1063)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1064)       _copy_source = source;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1065)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1066)     inline bool get_url_type_token()
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1067)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1068)       return _url_type_token;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1069)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1070)     inline void set_url_type_token(bool val)
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1071)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1072)       _url_type_token = val;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1073)     }
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1074)     inline bool get_infinite_url_type_token()
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1075)     {
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1076)       return _infinite_url_type_token;
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1077)     }
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1078)     inline void set_infinite_url_type_token(bool val)
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1079)     {
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1080)       _infinite_url_type_token = val;
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1081)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1082)     inline bool get_acl_main_override()
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1083)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1084)       return _acl_main_override;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1085)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1086)     inline void set_acl_main_override(bool val)
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1087)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1088)       _acl_main_override = val;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1089)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1090)     inline bool get_acl_copy_override()
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1091)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1092)       return _acl_copy_override;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1093)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1094)     inline void set_acl_copy_override(bool val)
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1095)     {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1096)       _acl_copy_override = val;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1097)     }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1098) 
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1099) 
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1100)     authorization_method(bool method, bool action, bool url_token,
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1101)                          bool infini_token, bool acl_main, bool acl_copy) :
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1102)       _token_validation(method),
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1103)       _copy_action(action),
6fc470eb src/rgw/rgw_common.h     (root                2016-04-08 18:17:45 +0530 1104)       _url_type_token(url_token),
4da7376c src/rgw/rgw_common.h     (Shivanshu Goswami   2016-04-26 10:14:00 +0000 1105)       _infinite_url_type_token(infini_token),
6fc470eb src/rgw/rgw_common.h     (root                2016-04-08 18:17:45 +0530 1106)       _acl_main_override(acl_main),
6fc470eb src/rgw/rgw_common.h     (root                2016-04-08 18:17:45 +0530 1107)       _acl_copy_override(acl_copy) { }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1108)     ~authorization_method() { }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1109) };
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1110) 
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1111) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1112) /** Store all the state necessary to complete and respond to an HTTP request*/
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1113) struct req_state {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1114)    CephContext *cct;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1115)    RGWClientIO *cio;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1116)    http_op op;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1117)    bool content_started;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1118)    int format;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1119)    ceph::Formatter *formatter;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1120)    string decoded_uri;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1121)    string relative_uri;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1122)    const char *length;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1123)    int64_t content_length;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1124)    map<string, string> generic_attrs;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1125)    struct rgw_err err;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1126)    bool expect_cont;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1127)    bool header_ended;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1128)    uint64_t obj_size;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1129)    bool enable_ops_log;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1130)    bool enable_usage_log;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1131)    uint8_t defer_to_bucket_acls;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1132)    uint32_t perm_mask;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1133)    utime_t header_time;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1134) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1135)    rgw_bucket bucket;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1136)    string bucket_name_str;
c270db3a src/rgw/rgw_common.h     (Gaurav Bafna        2016-04-14 15:00:01 +0530 1137)    string bucket_owner_id;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1138)    rgw_obj_key object;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1139)    string src_bucket_name;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1140)    rgw_obj_key src_object;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1141)    ACLOwner bucket_owner;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1142)    ACLOwner owner;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1143) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1144)    string region_endpoint;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1145)    string bucket_instance_id;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1146) 
ec07cbc1 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-03-26 21:25:54 -0700 1147)    string redirect;
ec07cbc1 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-03-26 21:25:54 -0700 1148) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1149)    RGWBucketInfo bucket_info;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1150)    map<string, bufferlist> bucket_attrs;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1151)    bool bucket_exists;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1152) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1153)    bool has_bad_meta;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1154) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1155)    RGWUserInfo user; 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1156)    RGWAccessControlPolicy *bucket_acl;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1157)    RGWAccessControlPolicy *object_acl;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1158) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1159)    bool system_request;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1160) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1161)    string canned_acl;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1162)    bool has_acl_header;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1163)    const char *copy_source;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1164)    const char *http_auth;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1165)    bool local_source; /* source is local */
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1166) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1167)    int prot_flags;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1168) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1169)    const char *os_auth_token;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1170)    string swift_user;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1171)    string swift_groups;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1172) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1173)    utime_t time;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1174) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1175)    void *obj_ctx;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1176) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1177)    string dialect;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1178) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1179)    string req_id;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1180) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1181)    string trans_id;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1182) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1183)    req_info info;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1184)   
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1185)    authorization_method auth_method;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1186) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1187)    req_state(CephContext *_cct, class RGWEnv *e);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1188)    ~req_state();
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700 1189) };
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700 1190) 
62e11112 src/rgw/rgw_common.h     (Greg Farnum         2010-03-11 14:49:27 -0800 1191) /** Store basic data on an object */
d0f58ad8 src/radosgw/rgw_common.h (Yehuda Sadeh        2009-08-07 10:46:29 -0700 1192) struct RGWObjEnt {
cb3694fb src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 15:12:21 -0700 1193)   rgw_obj_key key;
49b3d2e0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-16 17:44:46 -0700 1194)   std::string ns;
edc6659b src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-10 15:01:04 -0700 1195)   std::string owner;
edc6659b src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-10 15:01:04 -0700 1196)   std::string owner_display_name;
df2967a6 src/rgw/rgw_common.h     (Greg Farnum         2011-10-24 15:22:35 -0700 1197)   uint64_t size;
b295c649 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-15 22:49:26 -0700 1198)   utime_t mtime;
98d0361d src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-21 17:14:48 -0700 1199)   string etag;
b738b72c src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-23 16:50:21 -0700 1200)   string content_type;
b295c649 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-15 22:49:26 -0700 1201)   string tag;
105ba489 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 09:48:17 -0700 1202)   uint32_t flags;
ecd5496d src/rgw/rgw_common.h     (Yehuda Sadeh        2014-12-18 16:43:17 -0800 1203)   uint64_t versioned_epoch;
8b4b8384 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-16 13:26:19 -0700 1204) 
ecd5496d src/rgw/rgw_common.h     (Yehuda Sadeh        2014-12-18 16:43:17 -0800 1205)   RGWObjEnt() : size(0), flags(0), versioned_epoch(0) {}
e6e36c0a src/rgw/rgw_common.h     (Sage Weil           2012-07-03 18:51:02 -0700 1206) 
b295c649 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-04-15 22:49:26 -0700 1207)   void dump(Formatter *f) const;
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1208) 
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1209)   bool is_current() {
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1210)     uint32_t test_flags = RGW_BUCKET_DIRENT_FLAG_VER | RGW_BUCKET_DIRENT_FLAG_CURRENT;
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1211)     return (flags & RGW_BUCKET_DIRENT_FLAG_VER) == 0 ||
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1212)            (flags & test_flags) == test_flags;
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1213)   }
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1214)   bool is_delete_marker() { return (flags & RGW_BUCKET_DIRENT_FLAG_DELETE_MARKER) != 0; }
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1215)   bool is_visible() {
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1216)     return is_current() && !is_delete_marker();
debee800 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-09-26 11:11:17 -0700 1217)   }
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700 1218) };
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700 1219) 
6752babd src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-26 14:30:26 -0700 1220) /** Store basic data on bucket */
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1221) struct RGWBucketEnt {
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700 1222)   rgw_bucket bucket;
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1223)   size_t size;
7a32cc60 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-11-08 13:42:55 -0800 1224)   size_t size_rounded;
a2cf14fe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-15 18:41:21 -0700 1225)   time_t creation_time;
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1226)   uint64_t count;
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1227) 
a2cf14fe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-15 18:41:21 -0700 1228)   RGWBucketEnt() : size(0), size_rounded(0), creation_time(0), count(0) {}
949f24d5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-12-30 14:18:40 -0800 1229) 
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800 1230)   RGWBucketEnt(const cls_user_bucket_entry& e) {
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800 1231)     bucket = e.bucket;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800 1232)     size = e.size;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800 1233)     size_rounded = e.size_rounded;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800 1234)     creation_time = e.creation_time;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800 1235)     count = e.count;
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800 1236)   }
23aa65f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 15:22:37 -0800 1237) 
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800 1238)   void convert(cls_user_bucket_entry *b) {
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800 1239)     bucket.convert(&b->bucket);
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800 1240)     b->size = size;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800 1241)     b->size_rounded = size_rounded;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800 1242)     b->creation_time = creation_time;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800 1243)     b->count = count;
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800 1244)   }
c7b4d008 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-12-06 16:23:33 -0800 1245) 
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1246)   void encode(bufferlist& bl) const {
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800 1247)     ENCODE_START(5, 5, bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1248)     uint64_t s = size;
a2cf14fe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-15 18:41:21 -0700 1249)     __u32 mt = creation_time;
9065dbd3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-02-13 12:07:17 -0800 1250)     string empty_str;  // originally had the bucket name here, but we encode bucket later
9065dbd3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-02-13 12:07:17 -0800 1251)     ::encode(empty_str, bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1252)     ::encode(s, bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1253)     ::encode(mt, bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1254)     ::encode(count, bl);
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700 1255)     ::encode(bucket, bl);
7a32cc60 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-11-08 13:42:55 -0800 1256)     s = size_rounded;
7a32cc60 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-11-08 13:42:55 -0800 1257)     ::encode(s, bl);
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800 1258)     ENCODE_FINISH(bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1259)   }
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1260)   void decode(bufferlist::iterator& bl) {
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800 1261)     DECODE_START_LEGACY_COMPAT_LEN(5, 5, 5, bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1262)     __u32 mt;
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1263)     uint64_t s;
9065dbd3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-02-13 12:07:17 -0800 1264)     string empty_str;  // backward compatibility
9065dbd3 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-02-13 12:07:17 -0800 1265)     ::decode(empty_str, bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1266)     ::decode(s, bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1267)     ::decode(mt, bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1268)     size = s;
a2cf14fe src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-15 18:41:21 -0700 1269)     creation_time = mt;
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1270)     if (struct_v >= 2)
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1271)       ::decode(count, bl);
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700 1272)     if (struct_v >= 3)
ff9537e5 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-08-17 17:11:55 -0700 1273)       ::decode(bucket, bl);
7a32cc60 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-11-08 13:42:55 -0800 1274)     if (struct_v >= 4)
7a32cc60 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-11-08 13:42:55 -0800 1275)       ::decode(s, bl);
7a32cc60 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-11-08 13:42:55 -0800 1276)     size_rounded = s;
ffcf62f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-07 16:29:11 -0800 1277)     DECODE_FINISH(bl);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1278)   }
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800 1279)   void dump(Formatter *f) const;
2277fb45 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-08 16:58:00 -0800 1280)   static void generate_test_instances(list<RGWBucketEnt*>& o);
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1281) };
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1282) WRITE_CLASS_ENCODER(RGWBucketEnt)
9bd627d1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-03 14:14:19 -0800 1283) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1284) class rgw_obj {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1285)   std::string orig_obj;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1286)   std::string loc;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1287)   std::string object;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1288)   std::string instance;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1289) public:
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1290)   const std::string& get_object() const { return object; }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1291)   const std::string& get_orig_obj() const { return orig_obj; }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1292)   const std::string& get_loc() const { return loc; }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1293)   const std::string& get_instance() const { return instance; }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1294)   rgw_bucket bucket;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1295)   std::string ns;
8bd984d9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-08 12:32:50 -0700 1296) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1297)   bool in_extra_data; /* in-memory only member, does not serialize */
7989cbd4 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-11 13:24:55 -0700 1298) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1299)   // Represents the hash index source for this object once it is set (non-empty)
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1300)   std::string index_hash_source;
6f44f7a0 src/rgw/rgw_common.h     (Yehuda Sadeh        2015-01-21 17:30:32 -0800 1301) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1302)   rgw_obj() : in_extra_data(false) {}
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1303)   rgw_obj(rgw_bucket& b, const std::string& o) : in_extra_data(false) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1304)     init(b, o);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1305)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1306)   rgw_obj(rgw_bucket& b, const rgw_obj_key& k) : in_extra_data(false) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1307)     init(b, k.name);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1308)     set_instance(k.instance);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1309)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1310)   void init(rgw_bucket& b, const std::string& o) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1311)     bucket = b;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1312)     set_obj(o);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1313)     reset_loc();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1314)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1315)   void init_ns(rgw_bucket& b, const std::string& o, const std::string& n) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1316)     bucket = b;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1317)     set_ns(n);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1318)     set_obj(o);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1319)     reset_loc();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1320)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1321)   int set_ns(const char *n) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1322)     if (!n)
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1323)       return -EINVAL;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1324)     string ns_str(n);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1325)     return set_ns(ns_str);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1326)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1327)   int set_ns(const string& n) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1328)     if (n[0] == '_')
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1329)       return -EINVAL;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1330)     ns = n;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1331)     set_obj(orig_obj);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1332)     return 0;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1333)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1334)   int set_instance(const string& i) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1335)     if (i[0] == '_')
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1336)       return -EINVAL;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1337)     instance = i;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1338)     set_obj(orig_obj);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1339)     return 0;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1340)   }
802e9e5a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-09 13:25:46 -0700 1341) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1342)   int clear_instance() {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1343)     return set_instance(string());
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1344)   }
cb94d55c src/rgw/rgw_common.h     (Yehuda Sadeh        2014-12-15 22:12:48 -0800 1345) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1346)   void set_loc(const string& k) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1347)     loc = k;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1348)   }
802e9e5a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-09 13:25:46 -0700 1349) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1350)   void reset_loc() {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1351)     loc.clear();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1352)     /*
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1353)      * For backward compatibility. Older versions used to have object locator on all objects,
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1354)      * however, the orig_obj was the effective object locator. This had the same effect as not
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1355)      * having object locator at all for most objects but the ones that started with underscore as
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1356)      * these were escaped.
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1357)      */
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1358)     if (orig_obj[0] == '_' && ns.empty()) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1359)       loc = orig_obj;
512ae4cb src/rgw/rgw_common.h     (Yehuda Sadeh        2015-04-21 17:31:41 -0700 1360)     }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1361)   }
4e9ebd6b src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-05 12:37:05 -0800 1362) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1363)   bool have_null_instance() {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1364)     return instance == "null";
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1365)   }
3e48a49f src/rgw/rgw_common.h     (Yehuda Sadeh        2014-10-28 17:01:34 -0700 1366) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1367)   bool have_instance() {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1368)     return !instance.empty();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1369)   }
7f139286 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-10-27 17:09:57 -0700 1370) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1371)   bool need_to_encode_instance() {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1372)     return have_instance() && !have_null_instance();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1373)   }
524a155e src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-25 14:08:01 -0700 1374) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1375)   void set_obj(const string& o) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1376)     object.reserve(128);
802e9e5a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-09 13:25:46 -0700 1377) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1378)     orig_obj = o;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1379)     if (ns.empty() && !need_to_encode_instance()) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1380)       if (o.empty()) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1381)         return;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1382)       }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1383)       if (o.size() < 1 || o[0] != '_') {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1384)         object = o;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1385)         return;
45586aa2 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 12:49:55 -0700 1386)       }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1387)       object = "_";
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1388)       object.append(o);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1389)     } else {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1390)       object = "_";
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1391)       object.append(ns);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1392)       if (need_to_encode_instance()) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1393)         object.append(string(":") + instance);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1394)       }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1395)       object.append("_");
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1396)       object.append(o);
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1397)     }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1398)     reset_loc();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1399)   }
45586aa2 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 12:49:55 -0700 1400) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1401)   /*
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1402)    * get the object's key name as being referred to by the bucket index.
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1403)    */
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1404)   string get_index_key_name() const {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1405)     if (ns.empty()) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1406)       if (orig_obj.size() < 1 || orig_obj[0] != '_') {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1407)         return orig_obj;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1408)       }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1409)       return string("_") + orig_obj;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1410)     };
45586aa2 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 12:49:55 -0700 1411) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1412)     char buf[ns.size() + 16];
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1413)     snprintf(buf, sizeof(buf), "_%s_", ns.c_str());
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1414)     return string(buf) + orig_obj;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1415)   };
cb3694fb src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 15:12:21 -0700 1416) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1417)   void get_index_key(rgw_obj_key *key) const {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1418)     key->name = get_index_key_name();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1419)     key->instance = instance;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1420)   }
45586aa2 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 12:49:55 -0700 1421) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1422)   static void parse_ns_field(string& ns, string& instance) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1423)     int pos = ns.find(':');
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1424)     if (pos >= 0) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1425)       instance = ns.substr(pos + 1);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1426)       ns = ns.substr(0, pos);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1427)     } else {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1428)       instance.clear();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1429)     }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1430)   }
802e9e5a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-09 13:25:46 -0700 1431) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1432)   string& get_hash_object() {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1433)     return index_hash_source.empty() ? orig_obj : index_hash_source;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1434)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1435)   /**
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1436)    * Translate a namespace-mangled object name to the user-facing name
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1437)    * existing in the given namespace.
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1438)    *
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1439)    * If the object is part of the given namespace, it returns true
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1440)    * and cuts down the name to the unmangled version. If it is not
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1441)    * part of the given namespace, it returns false.
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1442)    */
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1443)   static bool translate_raw_obj_to_obj_in_ns(string& obj, string& instance, string& ns) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1444)     if (obj[0] != '_') {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1445)       if (ns.empty()) {
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1446)         return true;
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1447)       }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1448)       return false;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1449)     }
802e9e5a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-09 13:25:46 -0700 1450) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1451)     string obj_ns;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1452)     bool ret = parse_raw_oid(obj, &obj, &instance, &obj_ns);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1453)     if (!ret) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1454)       return ret;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1455)     }
6c6aa5dd src/rgw/rgw_common.h     (Yehuda Sadeh        2015-04-29 17:12:00 -0700 1456) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1457)     return (ns == obj_ns);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1458)   }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1459) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1460)   static bool parse_raw_oid(const string& oid, string *obj_name, string *obj_instance, string *obj_ns) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1461)     obj_instance->clear();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1462)     obj_ns->clear();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1463)     if (oid[0] != '_') {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1464)       *obj_name = oid;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1465)       return true;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1466)     }
6c6aa5dd src/rgw/rgw_common.h     (Yehuda Sadeh        2015-04-29 17:12:00 -0700 1467) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1468)     if (oid.size() >= 2 && oid[1] == '_') {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1469)       *obj_name = oid.substr(1);
6c6aa5dd src/rgw/rgw_common.h     (Yehuda Sadeh        2015-04-29 17:12:00 -0700 1470)       return true;
6c6aa5dd src/rgw/rgw_common.h     (Yehuda Sadeh        2015-04-29 17:12:00 -0700 1471)     }
6c6aa5dd src/rgw/rgw_common.h     (Yehuda Sadeh        2015-04-29 17:12:00 -0700 1472) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1473)     if (oid[0] != '_' || oid.size() < 3) // for namespace, min size would be 3: _x_
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1474)       return false;
802e9e5a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-09 13:25:46 -0700 1475) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1476)     int pos = oid.find('_', 1);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1477)     if (pos <= 1) // if it starts with __, it's not in our namespace
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1478)       return false;
802e9e5a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-09 13:25:46 -0700 1479) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1480)     *obj_ns = oid.substr(1, pos - 1);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1481)     parse_ns_field(*obj_ns, *obj_instance);
802e9e5a src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-09 13:25:46 -0700 1482) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1483)     *obj_name = oid.substr(pos + 1);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1484)     return true;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1485)   }
e6eef5e9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-30 17:13:42 -0700 1486) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1487)   /**
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1488)    * Given a mangled object name and an empty namespace string, this
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1489)    * function extracts the namespace into the string and sets the object
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1490)    * name to be the unmangled version.
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1491)    *
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1492)    * It returns true after successfully doing so, or
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1493)    * false if it fails.
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1494)    */
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1495)   static bool strip_namespace_from_object(string& obj, string& ns, string& instance) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1496)     ns.clear();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1497)     instance.clear();
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1498)     if (obj[0] != '_') {
f57c33df src/rgw/rgw_common.h     (Greg Farnum         2011-10-20 16:26:15 -0700 1499)       return true;
f57c33df src/rgw/rgw_common.h     (Greg Farnum         2011-10-20 16:26:15 -0700 1500)     }
f57c33df src/rgw/rgw_common.h     (Greg Farnum         2011-10-20 16:26:15 -0700 1501) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1502)     size_t pos = obj.find('_', 1);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1503)     if (pos == string::npos) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1504)       return false;
f57c33df src/rgw/rgw_common.h     (Greg Farnum         2011-10-20 16:26:15 -0700 1505)     }
f57c33df src/rgw/rgw_common.h     (Greg Farnum         2011-10-20 16:26:15 -0700 1506) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1507)     size_t period_pos = obj.find('.');
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1508)     if (period_pos < pos) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1509)       return false;
f57c33df src/rgw/rgw_common.h     (Greg Farnum         2011-10-20 16:26:15 -0700 1510)     }
f57c33df src/rgw/rgw_common.h     (Greg Farnum         2011-10-20 16:26:15 -0700 1511) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1512)     ns = obj.substr(1, pos-1);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1513)     obj = obj.substr(pos+1, string::npos);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1514) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1515)     parse_ns_field(ns, instance);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1516)     return true;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1517)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1518) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1519)   void set_in_extra_data(bool val) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1520)     in_extra_data = val;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1521)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1522) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1523)   bool is_in_extra_data() const {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1524)     return in_extra_data;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1525)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1526) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1527)   void encode(bufferlist& bl) const {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1528)     ENCODE_START(5, 3, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1529)     ::encode(bucket.name, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1530)     ::encode(loc, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1531)     ::encode(ns, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1532)     ::encode(object, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1533)     ::encode(bucket, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1534)     ::encode(instance, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1535)     if (!ns.empty() || !instance.empty()) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1536)       ::encode(orig_obj, bl);
3e54acbc src/rgw/rgw_common.h     (Yehuda Sadeh        2015-02-09 18:16:13 -0800 1537)     }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1538)     ENCODE_FINISH(bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1539)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1540)   void decode(bufferlist::iterator& bl) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1541)     DECODE_START_LEGACY_COMPAT_LEN(5, 3, 3, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1542)     ::decode(bucket.name, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1543)     ::decode(loc, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1544)     ::decode(ns, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1545)     ::decode(object, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1546)     if (struct_v >= 2)
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1547)       ::decode(bucket, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1548)     if (struct_v >= 4)
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1549)       ::decode(instance, bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1550)     if (ns.empty() && instance.empty()) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1551)       orig_obj = object;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1552)     } else {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1553)       if (struct_v >= 5) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1554)         ::decode(orig_obj, bl);
3e54acbc src/rgw/rgw_common.h     (Yehuda Sadeh        2015-02-09 18:16:13 -0800 1555)       } else {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1556)         ssize_t pos = object.find('_', 1);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1557)         if (pos < 0) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1558)           throw buffer::error();
3e54acbc src/rgw/rgw_common.h     (Yehuda Sadeh        2015-02-09 18:16:13 -0800 1559)         }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1560)         orig_obj = object.substr(pos);
3e54acbc src/rgw/rgw_common.h     (Yehuda Sadeh        2015-02-09 18:16:13 -0800 1561)       }
4d884040 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-24 16:43:14 -0700 1562)     }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1563)     DECODE_FINISH(bl);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1564)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1565)   void dump(Formatter *f) const;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1566)   static void generate_test_instances(list<rgw_obj*>& o);
4d884040 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-24 16:43:14 -0700 1567) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1568)   bool operator==(const rgw_obj& o) const {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1569)     return (object.compare(o.object) == 0) &&
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1570)            (bucket.name.compare(o.bucket.name) == 0) &&
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1571)            (ns.compare(o.ns) == 0) &&
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1572)            (instance.compare(o.instance) == 0);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1573)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1574)   bool operator<(const rgw_obj& o) const {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1575)     int r = bucket.name.compare(o.bucket.name);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1576)     if (r == 0) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1577)      r = object.compare(o.object);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1578)      if (r == 0) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1579)        r = ns.compare(o.ns);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1580)        if (r == 0) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1581)          r = instance.compare(o.instance);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1582)        }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1583)      }
d6641cb4 src/rgw/rgw_common.h     (root                2016-04-08 15:28:18 +0530 1584)     }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1585) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1586)     return (r < 0);
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1587)   }
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1588) };
e6eef5e9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-30 17:13:42 -0700 1589) WRITE_CLASS_ENCODER(rgw_obj)
8bd984d9 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-08 12:32:50 -0700 1590) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1591) struct rgw_cache_entry_info {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1592)   string cache_locator;
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1593)   uint64_t gen;
ab764f38 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-19 16:34:21 -0700 1594) 
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1595)   rgw_cache_entry_info() : gen(0) {}
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1596) };
ab764f38 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-03-19 16:34:21 -0700 1597) 
f106e1a5 src/rgw/rgw_common.h     (Danny Al-Gaaf       2013-03-11 15:35:53 +0100 1598) inline ostream& operator<<(ostream& out, const rgw_obj &o) {
45586aa2 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 12:49:55 -0700 1599)   return out << o.bucket.name << ":" << o.get_object();
7bbdcdba src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 12:55:25 -0700 1600) }
7bbdcdba src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 12:55:25 -0700 1601) 
422bb6d0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 11:03:12 -0700 1602) static inline bool str_startswith(const string& str, const string& prefix)
422bb6d0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 11:03:12 -0700 1603) {
422bb6d0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 11:03:12 -0700 1604)   return (str.compare(0, prefix.size(), prefix) == 0);
422bb6d0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 11:03:12 -0700 1605) }
422bb6d0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-25 11:03:12 -0700 1606) 
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1607) static inline void buf_to_hex(const unsigned char *buf, int len, char *str)
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1608) {
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1609)   int i;
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1610)   str[0] = '\0';
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1611)   for (i = 0; i < len; i++) {
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1612)     sprintf(&str[i*2], "%02x", (int)buf[i]);
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1613)   }
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1614) }
e2100bce src/s3/s3common.h        (Yehuda Sadeh        2009-07-20 16:41:25 -0700 1615) 
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1616) static inline int hexdigit(char c)
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1617) {
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1618)   if (c >= '0' && c <= '9')
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1619)     return (c - '0');
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1620)   c = toupper(c);
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1621)   if (c >= 'A' && c <= 'F')
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1622)     return c - 'A' + 0xa;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1623)   return -EINVAL;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1624) }
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1625) 
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1626) static inline int hex_to_buf(const char *hex, char *buf, int len)
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1627) {
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1628)   int i = 0;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1629)   const char *p = hex;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1630)   while (*p) {
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1631)     if (i >= len)
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1632)       return -EINVAL;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1633)     buf[i] = 0;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1634)     int d = hexdigit(*p);
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1635)     if (d < 0)
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1636)       return d;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1637)     buf[i] = d << 4;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1638)     p++;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1639)     if (!*p)
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1640)       return -EINVAL;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1641)     d = hexdigit(*p);
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1642)     if (d < 0)
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1643)       return -d;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1644)     buf[i] += d;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1645)     i++;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1646)     p++;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1647)   }
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1648)   return i;
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1649) }
37fd3b58 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-07 14:13:59 -0700 1650) 
f04b6adc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-10 10:01:24 -0800 1651) static inline int rgw_str_to_bool(const char *s, int def_val)
f04b6adc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-10 10:01:24 -0800 1652) {
f04b6adc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-10 10:01:24 -0800 1653)   if (!s)
f04b6adc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-10 10:01:24 -0800 1654)     return def_val;
f04b6adc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-10 10:01:24 -0800 1655) 
f04b6adc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-10 10:01:24 -0800 1656)   return (strcasecmp(s, "on") == 0 ||
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1657)           strcasecmp(s, "yes") == 0 ||
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1658)           strcasecmp(s, "1") == 0);
f04b6adc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-10 10:01:24 -0800 1659) }
f04b6adc src/rgw/rgw_common.h     (Yehuda Sadeh        2011-03-10 10:01:24 -0800 1660) 
45586aa2 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-08-06 12:49:55 -0700 1661) static inline void append_rand_alpha(CephContext *cct, const string& src, string& dest, int len)
d0340426 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 14:50:01 -0700 1662) {
d0340426 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 14:50:01 -0700 1663)   dest = src;
d0340426 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 14:50:01 -0700 1664)   char buf[len + 1];
b9097619 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-03-13 14:59:00 -0700 1665)   gen_rand_alphanumeric(cct, buf, len);
d0340426 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 14:50:01 -0700 1666)   dest.append("_");
d0340426 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 14:50:01 -0700 1667)   dest.append(buf);
d0340426 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 14:50:01 -0700 1668) }
d0340426 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-06-24 14:50:01 -0700 1669) 
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700 1670) static inline const char *rgw_obj_category_name(RGWObjCategory category)
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700 1671) {
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700 1672)   switch (category) {
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1673)   case RGW_OBJ_CATEGORY_NONE:
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1674)     return "rgw.none";
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1675)   case RGW_OBJ_CATEGORY_MAIN:
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1676)     return "rgw.main";
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1677)   case RGW_OBJ_CATEGORY_SHADOW:
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1678)     return "rgw.shadow";
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1679)   case RGW_OBJ_CATEGORY_MULTIMETA:
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1680)     return "rgw.multimeta";
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700 1681)   }
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700 1682) 
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700 1683)   return "unknown";
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700 1684) }
ca77ba77 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-09-23 17:11:49 -0700 1685) 
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700 1686) static inline uint64_t rgw_rounded_kb(uint64_t bytes)
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700 1687) {
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700 1688)   return (bytes + 1023) / 1024;
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700 1689) }
db5bbdd0 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-09-26 13:24:48 -0700 1690) 
2f9a93d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-14 00:18:52 -0800 1691) static inline uint64_t rgw_rounded_objsize_kb(uint64_t bytes)
2f9a93d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-14 00:18:52 -0800 1692) {
2f9a93d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-14 00:18:52 -0800 1693)   return ((bytes + 4095) & ~4095) / 1024;
2f9a93d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-14 00:18:52 -0800 1694) }
2f9a93d3 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-01-14 00:18:52 -0800 1695) 
97c19da4 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-11-07 15:39:56 -0800 1696) extern string rgw_string_unquote(const string& s);
eb0f49d4 src/rgw/rgw_common.h     (Caleb Miles         2013-02-19 12:15:30 -0500 1697) extern void parse_csv_string(const string& ival, vector<string>& ovals);
eb0f49d4 src/rgw/rgw_common.h     (Caleb Miles         2013-02-19 12:15:30 -0500 1698) extern int parse_key_value(string& in_str, string& key, string& val);
eb0f49d4 src/rgw/rgw_common.h     (Caleb Miles         2013-02-19 12:15:30 -0500 1699) extern int parse_key_value(string& in_str, const char *delim, string& key, string& val);
dd3282c1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-14 13:20:20 -0700 1700) /** time parsing */
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700 1701) extern int parse_time(const char *time_str, time_t *time);
dd3282c1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-14 13:20:20 -0700 1702) extern bool parse_rfc2616(const char *s, struct tm *t);
30d11f42 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-10-11 15:36:07 -0700 1703) extern bool parse_iso8601(const char *s, struct tm *t);
da5e443c src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-10 21:58:02 -0700 1704) extern string rgw_trim_whitespace(const string& src);
da5e443c src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-10 21:58:02 -0700 1705) extern string rgw_trim_quotes(const string& val);
da5e443c src/rgw/rgw_common.h     (Yehuda Sadeh        2013-06-10 21:58:02 -0700 1706) 
dd3282c1 src/rgw/rgw_common.h     (Yehuda Sadeh        2011-10-14 13:20:20 -0700 1707) 
62e11112 src/rgw/rgw_common.h     (Greg Farnum         2010-03-11 14:49:27 -0800 1708) /** Check if the req_state's user has the necessary permissions
62e11112 src/rgw/rgw_common.h     (Greg Farnum         2010-03-11 14:49:27 -0800 1709)  * to do the requested action */
2365c77a src/rgw/rgw_common.h     (Yehuda Sadeh        2012-02-21 14:39:20 -0800 1710) extern bool verify_bucket_permission(struct req_state *s, int perm);
4d2a05f6 src/rgw/rgw_common.h     (Yehuda Sadeh        2012-08-22 17:16:05 -0700 1711) extern bool verify_object_permission(struct req_state *s, RGWAccessControlPolicy *bucket_acl, RGWAccessControlPolicy *object_acl, int perm);
2365c77a src/rgw/rgw_common.h     (Yehuda Sadeh        2012-02-21 14:39:20 -0800 1712) extern bool verify_object_permission(struct req_state *s, int perm);
62e11112 src/rgw/rgw_common.h     (Greg Farnum         2010-03-11 14:49:27 -0800 1713) /** Convert an input URL into a sane object name
62e11112 src/rgw/rgw_common.h     (Greg Farnum         2010-03-11 14:49:27 -0800 1714)  * by converting %-escaped strings into characters, etc*/
21e07eb6 src/rgw/rgw_common.h     (Yehuda Sadeh        2014-12-11 09:07:10 -0800 1715) extern bool url_decode(string& src_str, string& dest_str, bool in_query = false);
dd308cd4 src/rgw/rgw_common.h     (Josh Durgin         2013-10-24 08:37:25 -0700 1716) extern void url_encode(const string& src, string& dst);
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700 1717) 
70b021d4 src/rgw/rgw_common.h     (Colin P. McCabe     2011-03-23 22:42:02 -0700 1718) extern void calc_hmac_sha1(const char *key, int key_len,
a96dd147 src/rgw/rgw_common.h     (root                2016-04-08 15:50:30 +0530 1719)                           const char *msg, int msg_len, char *dest);
70b021d4 src/rgw/rgw_common.h     (Colin P. McCabe     2011-03-23 22:42:02 -0700 1720) /* destination should be CEPH_CRYPTO_HMACSHA1_DIGESTSIZE bytes long */
70b021d4 src/rgw/rgw_common.h     (Colin P. McCabe     2011-03-23 22:42:02 -0700 1721) 
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700 1722) extern int rgw_parse_op_type_list(const string& str, uint32_t *perm);
38464515 src/rgw/rgw_common.h     (Yehuda Sadeh        2013-05-02 21:05:21 -0700 1723) 
536a8b64 src/s3/s3common.h        (Yehuda Sadeh        2009-07-17 17:49:59 -0700 1724) #endif
